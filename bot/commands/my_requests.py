import operator
from typing import Any

from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import DialogManager, Dialog, Window, DialogProtocol, StartMode
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Cancel, Select, Column, Button, Back
from aiogram_dialog.widgets.text import Const, Format

from app import dp
from commands.state_classes import MyRequests, RequestDelete, AddToRequest, AccountMainPage, Answers
from core.text import dialogs
from repositories.request_repository import request_repository
from utils.database import db_async_session_manager
from bot.core.constants import APP_TOKEN, LOGIN, PASSWORD, VALUES_STATUS

from bot.utils.api_requests import init_session, kill_session, create_comment, get_answers_for_ticket, close_ticket, \
    get_info_ticket
from bot.utils.utils import create_url

my_requests_text = dialogs['my_requests']
my_requests_router = Router(name='my_requests_router')


async def get_data(**kwargs):
    manager = kwargs['dialog_manager']
    async with db_async_session_manager() as session:
        requests_obj = await request_repository.get_requests_by_user(session, manager.start_data['user_id'])
        requests = []
        manager.dialog_data['transition'] = []
        for i, request in enumerate(requests_obj):
            manager.dialog_data['transition'].append(request)
            requests.append((request.question, i))
        return {
            "requests": requests,
            "count": len(requests),
        }


async def on_request_selected(callback: CallbackQuery, widget: Any,
                              manager: DialogManager, item_id: str):
    request = manager.dialog_data['transition'][int(item_id)]
    manager.dialog_data['request'] = vars(request)
    index = manager.dialog_data['request']['system_id']
    # TODO: —Ç—É—Ç —Å–¥–µ–ª–∞–π –∑–∞–ø—Ä–æ—Å –≤ –∞–ø–∏—à–∫—É –ø–æ –ø–æ–≤–æ–¥—É —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏, –ø–æ–ª–æ–∂–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é status
    url_init = await create_url("init_session")
    url_info = await create_url("ticket_info", index)
    url_kill = await create_url("kill_session")
    token = (await init_session(url_init, APP_TOKEN, LOGIN, PASSWORD))["session_token"]
    state = (await get_info_ticket(url_info, APP_TOKEN, token))["status"]
    kill = await kill_session(url_kill, APP_TOKEN, token)
    status = VALUES_STATUS[state]
    manager.dialog_data['text'] = f"{manager.dialog_data['request']['question']}\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {status}"
    await manager.next()


async def start_adding(callback: CallbackQuery, button: Button,
                       manager: DialogManager):
    await manager.start(AddToRequest.insert_question, data=manager.dialog_data)


async def start_answers(callback: CallbackQuery, button: Button,
                        manager: DialogManager):
    # TODO: –∑–∞–ø—Ä–æ—Å –≤ –∞–ø–∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ–µ–¥–∏–Ω—è–µ—Ç –∏—Ö
    index = manager.dialog_data['request']['system_id']
    url_init = await create_url("init_session")
    url_answers = await create_url("get_solution", index)  # TODO —Å—é–¥–∞ –≤–º–µ—Å—Ç–æ index id –∏–∑ –±–¥
    url_kill = await create_url("kill_session")
    token = (await init_session(url_init, APP_TOKEN, LOGIN, PASSWORD))["session_token"]
    answers = await get_answers_for_ticket(url_answers, APP_TOKEN,
                                           token)  # TODO –¢—É—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–∞—Ä–µ –æ—Ç–≤–µ—Ç –≤ ["content"] –ª–µ–∂–∏—Ç, —Ç–∞–∫ —á—Ç–æ –Ω–∞–¥–æ –ø—Ä–∏–¥—É–º–∞—Ç—å —á—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤
    kill = await kill_session(url_kill, APP_TOKEN, token)
    answer = "\n----------------------------------------\n".join([el['content'] for el in answers])
    await manager.start(Answers.answer_showing, data={"updated_answers": answer})


async def start_deleting(callback: CallbackQuery, button: Button,
                         manager: DialogManager):
    await manager.start(RequestDelete.sure, data=manager.dialog_data)


async def delete_request(callback, button, manager):
    # TODO: —Ç—É—Ç –º–æ–∂–Ω–æ –∑–∞–æ–¥–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å
    index = manager.start_data['request']['system_id']
    url_init = await create_url("init_session")
    url_close = await create_url("create_get_comment", index)  # TODO —Å—é–¥–∞ –≤–º–µ—Å—Ç–æ index id –∏–∑ –±–¥
    url_kill = await create_url("kill_session")
    token = (await init_session(url_init, APP_TOKEN, LOGIN, PASSWORD))["session_token"]
    answer = await close_ticket(url_close, APP_TOKEN, token, index)  # TODO —Å—é–¥–∞ —Ç–æ–∂–µ –≤–º–µ—Å—Ç–æ index id –∏–∑ –±–¥
    kill = await kill_session(url_kill, APP_TOKEN, token)
    async with db_async_session_manager() as session:
        await request_repository.delete_request_by_id(session, manager.start_data['request']['id'])
    await manager.skip_category()


async def confirm_request_question(callback, button, manager):
    async with db_async_session_manager() as session:
        await request_repository.update_request_question_by_id(session, manager.start_data['request']['id'],
                                                               manager.dialog_data['new_question'])
    await manager.start(AccountMainPage.main, mode=StartMode.RESET_STACK)


async def insert_question(message: Message, dialog: DialogProtocol, manager: DialogManager):
    manager.dialog_data[
        'new_question'] = f"{manager.start_data['request']['question']}\n---------------------\n{message.text}"
    index = manager.start_data['request']['system_id']
    # TODO: —Ç—É—Ç —è –≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ–±—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª, –Ω–æ –∑—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫ –∑–∞–ø—Ä–æ—Å—É, —Ç–∏–ø–∞ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç—É—Ç —Ç–æ–∂–µ –Ω—É–∂–Ω–∞ –∞–ø–∏—à–∫–∞
    # TODO –ö–æ—Ä–æ—á–µ —ç—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ —Ç–∏–ø–∞ —É—Ç–æ—á–Ω—è—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å, —ç—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ –µ—Å—Ç—å –Ω—É–∂–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–æ—á–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞–∫ –∫–∞–∫ —Ç–∞–º –º–æ–≥—É—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
    url_init = await create_url("init_session")
    url_comment = await create_url("create_get_comment", index)  # TODO —Å—é–¥–∞ –≤–º–µ—Å—Ç–æ index id –∏–∑ –±–¥
    url_kill = await create_url("kill_session")
    token = (await init_session(url_init, APP_TOKEN, LOGIN, PASSWORD))["session_token"]
    answer = await create_comment(url_comment, APP_TOKEN, token, manager.dialog_data['new_question'],
                                  index)  # TODO —Å—é–¥–∞ —Ç–æ–∂–µ –≤–º–µ—Å—Ç–æ index id –∏–∑ –±–¥
    kill = await kill_session(url_kill, APP_TOKEN, token)
    await manager.next()


kbd = Select(
    Format("{item[0]}"),  # E.g `‚úì Apple (1/4)`
    id="s_request_questions",
    item_id_getter=operator.itemgetter(1),
    # each item is a tuple with id on a first position
    items="requests",  # we will use items from window data at a key `fruits`
    on_click=on_request_selected,
)

dialog = Dialog(Window(Const(my_requests_text['main_page']),
                       Column(kbd,
                              Cancel(Const("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†"))), state=MyRequests.requests, getter=get_data),
                Window(Format('{dialog_data[text]}'),
                       Button(Const("–î–æ–ø–æ–ª–Ω–∏—Ç—å"), id='add', on_click=start_adding),
                       Button(Const("–û—Ç–≤–µ—Ç—ã"), id='answers', on_click=start_answers),
                       Button(Const("–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É"), id='delete', on_click=start_deleting),
                       Back(Const("–ù–∞–∑–∞–¥‚¨ÖÔ∏è")),
                       Cancel(Const("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†")), state=MyRequests.request_menu
                       )
                )

delete_dialog = Dialog(Window(Const('–í—ã —É–≤–µ—Ä–µ–Ω—ã?'),
                              Button(Const('–£–¥–∞–ª–∏—Ç—å'), id='delete_article', on_click=delete_request),
                              Cancel(Const("–û—Ç–º–µ–Ω–∏—Ç—å")), state=RequestDelete.sure),
                       Window(Const("–£—Å–ø–µ—à–Ω–æ!"), Cancel(Const('–ö –º–æ–∏–º –∑–∞–ø—Ä–æ—Å–∞–º')),
                              state=RequestDelete.result))
add_to_request_dialog = Dialog(
    Window(Const('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å'), Cancel(Const("–û—Ç–º–µ–Ω–∏—Ç—å")), MessageInput(insert_question),
           state=AddToRequest.insert_question),
    Window(Format('{dialog_data[new_question]}'),
           Button(Const('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'), id='confirm', on_click=confirm_request_question),
           Cancel(Const("–û—Ç–º–µ–Ω–∏—Ç—å")), state=AddToRequest.confirm))
answers_dialog = Dialog(
    Window(Format('{start_data[updated_answers]}'), Cancel(Const('–ù–∞–∑–∞–¥')), state=Answers.answer_showing))
dp.include_router(answers_dialog)
dp.include_router(add_to_request_dialog)
dp.include_router(delete_dialog)
dp.include_router(dialog)
