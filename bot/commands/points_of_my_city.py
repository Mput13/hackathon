import enum
import json
import operator
import os

from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import Window, DialogManager, StartMode, Dialog, DialogProtocol
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Next, Back, Cancel, Button, Multiselect, Column, RequestLocation
from aiogram_dialog.widgets.markup.reply_keyboard import ReplyKeyboardFactory
from aiogram_dialog.widgets.text import Const, Format

from app import dp
from commands.state_classes import MainMenu, GetClosestPoint
from core.text import dialogs
from utils.utils import get_city, find_closest

intro_dialogs = dialogs['intro']
points_of_city_router = Router(name='points')

commands_dir = os.path.dirname(os.path.abspath(__file__))

# Open the 'points.json' file using its absolute pat

waste_select = Multiselect(
    Format("‚úì {item[0]}"),
    Format("{item[0]}"),
    id="m_waste_types",
    item_id_getter=operator.itemgetter(1),
    items="waste_types"
)


class PointsActionKinds(str, enum.Enum):
    points_of_city = 'points_of_city'
    categories_chosen = 'categories_chosen'
    main_menu = 'main_menu'


categories = ['–ë—É–º–∞–≥–∞üìÉ',
              '–ü–ª–∞—Å—Ç–∏–∫üî´',
              '–°—Ç–µ–∫–ª–æüçæ',
              '–ú–µ—Ç–∞–ª–ª‚öôÔ∏è',
              '–û–¥–µ–∂–¥–∞üé©',
              '–õ–∞–º–ø–æ—á–∫–∏üí°',
              '–ö—Ä—ã—à–µ—á–∫–∏üî¥',
              '–¢–µ—Ö–Ω–∏–∫–∞üì±',
              '–ë–∞—Ç–∞—Ä–µ–∫–∏ü™´',
              '–®–∏–Ω—ãüõû',
              '–û–ø–∞—Å–Ω–æ–µ‚ò¢',
              '–î—Ä—É–≥–æ–µ ']


async def get_data(**kwargs):
    waste_types = [(el, i) for i, el in enumerate(categories)]
    return {
        "waste_types": waste_types,
        "count": len(waste_types),
    }


async def points_of_city_start(callback: CallbackQuery, button: Button,
                               manager: DialogManager):
    await manager.start(GetClosestPoint.choosing_categories)


async def cords_sent(message: Message, dialog: DialogProtocol, manager: DialogManager):
    with open(os.path.join(commands_dir, 'points.json'), encoding='utf-8') as file:
        points = json.load(file)
    lat = message.location.latitude
    lon = message.location.longitude
    await message.delete()

    city = await get_city(lat, lon)
    if city == "–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –°—É—Ä–≥—É—Ç":
        city = "–°—É—Ä–≥—É—Ç"
    city_points = points.get(city)
    chosen = [categories[int(i)][:-1] for i in waste_select.get_checked(manager)]
    if city_points:
        lst = await find_closest(city_points, chosen, lat, lon)
        for text in lst:
            await message.answer(text)
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –≤–∞—à–µ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –Ω–µ—Ç —Ç–æ—á–µ–∫ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö –¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
    await manager.start(MainMenu.main, mode=StartMode.RESET_STACK)


dialog = Dialog(
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥—ã –º—É—Å–æ—Ä–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
        Next(Const("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω—ã‚úîÔ∏è")),
        Column(waste_select),
        getter=get_data,
        state=GetClosestPoint.choosing_categories,
    ),
    Window(
        Const("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"),
        RequestLocation(Const("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")),
        Back(Const("‚¨Ö–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π")),
        Cancel(Const("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")),
        MessageInput(cords_sent),
        state=GetClosestPoint.getting_cords,
        markup_factory=ReplyKeyboardFactory()
    )
)

dp.include_router(dialog)
